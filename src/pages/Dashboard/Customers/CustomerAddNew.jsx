import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

export default function AddCustomer() {
    const [citizenIdError, setCitizenIdError] = useState(false);
    const [emailError, setEmailError] = useState(false);
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        owner: "",
        citizen_id: "",
        firstName: "",
        lastName: "",
        dob: "",
        gender: "",
        address: "",
        phone: "",
        email: "",
        type: "", // ph√¢n lo·∫°i KH
        active: true,
    });

    const [loading, setLoading] = useState(false);
    const [toast, setToast] = useState("");

    // üîπ T·∫°o m√£ KH t·ª± ƒë·ªông khi m·ªü form
    useEffect(() => {
        setFormData((prev) => ({ ...prev, owner: "USR001" }));
    }, []);

    // CCCD ch·ªâ nh·∫≠p s·ªë + t·ªëi ƒëa 13
    const handleCitizenIdChange = (e) => {
        const value = e.target.value.replace(/\D/g, "");
        if (value.length <= 13) {
            setFormData({ ...formData, citizen_id: value });
        }
    };

    const handleCitizenIdBlur = () => {
        if (formData.citizen_id && formData.citizen_id.length !== 13) {
            setCitizenIdError(true);
        } else {
            setCitizenIdError(false);
        }
    };

    // Check email
    const handleEmailBlur = () => {
        if (formData.email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            setEmailError(!emailRegex.test(formData.email));
        } else {
            setEmailError(false);
        }
    };

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData({
            ...formData,
            [name]: type === "checkbox" ? checked : value,
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (citizenIdError || emailError) return;

        setLoading(true);
        setToast("");
        try {
            await new Promise((resolve) => setTimeout(resolve, 1200)); // gi·∫£ l·∫≠p API
            console.log("D·ªØ li·ªáu kh√°ch h√†ng:", formData);
            setToast("Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
            setTimeout(() => navigate("/customers"), 1500);
        } catch (error) {
            setToast("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setLoading(false);
        }
    };

    // Ch·ªâ b·∫Øt bu·ªôc c√°c tr∆∞·ªùng ch√≠nh
    const isFormValid =
        formData.owner &&
        formData.type &&
        formData.phone.match(/^[0-9]{10,11}$/) &&
        !citizenIdError &&
        !emailError;

    return (
        <div className="p-6 max-w-4xl mx-auto relative">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold">Th√™m m·ªõi kh√°ch h√†ng</h1>
                <button
                    type="button"
                    onClick={() => navigate("/customers")}
                    className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                >
                    Quay l·∫°i
                </button>
            </div>

            <form
                onSubmit={handleSubmit}
                className="bg-white shadow-md rounded-lg p-6 grid grid-cols-1 md:grid-cols-2 gap-6"
            >
                {/* Ng∆∞·ªùi qu·∫£n l√Ω */}
                <div>
                    <label className="block mb-1 font-medium">M√£ ng∆∞·ªùi qu·∫£n l√Ω</label>
                    <input
                        type="text"
                        name="owner"
                        value={"USR001"}
                        onChange={handleChange}
                        readOnly
                        className="w-full border rounded-md p-2 bg-gray-100 cursor-not-allowed"
                        required
                    />
                </div>
                {/* Ng∆∞·ªùi qu·∫£n l√Ω */}
                <div>
                    <label className="block mb-1 font-medium">T√™n ng∆∞·ªùi qu·∫£n l√Ω</label>
                    <input
                        type="text"
                        name="owner"
                        value={"USR001"}
                        onChange={handleChange}
                        readOnly
                        className="w-full border rounded-md p-2 bg-gray-100 cursor-not-allowed"
                        required
                    />
                </div>

                {/* H·ªç + T√™n */}
                <div>
                    <label className="block mb-1 font-medium">H·ªç</label>
                    <input
                        type="text"
                        name="firstName"
                        value={formData.firstName}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                        required
                    />
                </div>
                <div>
                    <label className="block mb-1 font-medium">T√™n</label>
                    <input
                        type="text"
                        name="lastName"
                        value={formData.lastName}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                        required
                    />
                </div>

                {/* CCCD (ko b·∫Øt bu·ªôc) */}
                <div>
                    <label className="block mb-1 font-medium">S·ªë CCCD (t√πy ch·ªçn)</label>
                    <input
                        type="text"
                        name="citizen_id"
                        value={formData.citizen_id}
                        onChange={handleCitizenIdChange}
                        onBlur={handleCitizenIdBlur}
                        className={`w-full border rounded-md p-2 ${citizenIdError ? "border-red-500" : "border-gray-300"
                            }`}
                        maxLength={13}
                        placeholder="Nh·∫≠p 13 s·ªë CCCD"
                    />
                    {citizenIdError && (
                        <p className="text-red-500 text-sm mt-1">
                            CCCD ph·∫£i g·ªìm ƒë√∫ng 13 ch·ªØ s·ªë
                        </p>
                    )}
                </div>

                {/* Ph√¢n lo·∫°i kh√°ch h√†ng */}
                <div>
                    <label className="block mb-1 font-medium">Lo·∫°i kh√°ch h√†ng</label>
                    <select
                        name="type"
                        value={formData.type}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                        required
                    >
                        <option value="">-- Ch·ªçn lo·∫°i --</option>
                        <option value="Th·ªã tr∆∞·ªùng">Th·ªã tr∆∞·ªùng</option>
                        <option value="Ti·ªÅm nƒÉng">Ti·ªÅm nƒÉng</option>
                        <option value="ƒê√£ l√† KH">ƒê√£ l√† kh√°ch h√†ng</option>
                    </select>
                </div>

                {/* Gi·ªõi t√≠nh + Ng√†y sinh (t√πy ch·ªçn) */}
                <div>
                    <label className="block mb-1 font-medium">Gi·ªõi t√≠nh</label>
                    <select
                        name="gender"
                        value={formData.gender}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                    >
                        <option value="">-- Gi·ªõi t√≠nh --</option>
                        <option value="Nam">Nam</option>
                        <option value="N·ªØ">N·ªØ</option>
                        <option value="Kh√°c">Kh√°c</option>
                    </select>
                </div>
                <div>
                    <label className="block mb-1 font-medium">Ng√†y sinh</label>
                    <input
                        type="date"
                        name="dob"
                        value={formData.dob}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                    />
                </div>

                {/* ƒê·ªãa ch·ªâ (t√πy ch·ªçn) */}
                <div className="col-span-2">
                    <label className="block mb-1 font-medium">ƒê·ªãa ch·ªâ</label>
                    <input
                        type="text"
                        name="address"
                        value={formData.address}
                        onChange={handleChange}
                        className="w-full border rounded-md p-2"
                    />
                </div>

                {/* S·ªë ƒëi·ªán tho·∫°i (b·∫Øt bu·ªôc) + Email (t√πy ch·ªçn) */}
                <div>
                    <label className="block mb-1 font-medium">S·ªë ƒëi·ªán tho·∫°i</label>
                    <input
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleChange}
                        pattern="[0-9]{10,11}"
                        className="w-full border rounded-md p-2"
                        required
                    />
                </div>
                <div>
                    <label className="block mb-1 font-medium">Email (t√πy ch·ªçn)</label>
                    <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        onBlur={handleEmailBlur}
                        className={`w-full border rounded-md p-2 ${emailError ? "border-red-500" : "border-gray-300"
                            }`}
                        placeholder="Nh·∫≠p email n·∫øu c√≥"
                    />
                    {emailError && (
                        <p className="text-red-500 text-sm mt-1">Email kh√¥ng h·ª£p l·ªá</p>
                    )}
                </div>

                {/* Tr·∫°ng th√°i */}
                <div className="col-span-2 flex items-center gap-2">
                    <input
                        type="checkbox"
                        name="active"
                        checked={formData.active}
                        onChange={handleChange}
                        className="w-4 h-4"
                    />
                    <label className="font-medium">ƒêang ho·∫°t ƒë·ªông</label>
                </div>

                {/* Buttons */}
                <div className="col-span-2 flex justify-end gap-2">
                    <button
                        type="button"
                        onClick={() => navigate("/customers")}
                        className="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500"
                        disabled={loading}
                    >
                        H·ªßy
                    </button>
                    <button
                        type="submit"
                        className={`px-6 py-2 rounded-lg flex items-center gap-2 ${isFormValid
                            ? "bg-blue-500 text-white hover:bg-blue-600"
                            : "bg-gray-300 text-gray-600 cursor-not-allowed"
                            }`}
                        disabled={loading || !isFormValid}
                    >
                        {loading && (
                            <svg
                                className="animate-spin h-5 w-5 text-white"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                            >
                                <circle
                                    className="opacity-25"
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    strokeWidth="4"
                                ></circle>
                                <path
                                    className="opacity-75"
                                    fill="currentColor"
                                    d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                                ></path>
                            </svg>
                        )}
                        {loading ? "ƒêang l∆∞u..." : "L∆∞u kh√°ch h√†ng"}
                    </button>
                </div>
            </form>

            {/* Toast */}
            {toast && (
                <div className="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg animate-fade-in">
                    {toast}
                </div>
            )}
        </div>
    );
}
